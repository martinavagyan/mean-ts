{"version":3,"sources":["./src/$_gendir lazy","./src/app/components/app.component.css","./src/app/components/app.component.html","./src/app/components/app.component.ts","./src/app/components/app.module.ts","./src/app/services/api-requests.service.ts","./src/app/services/configuration.service.ts","./src/app/test-component/test-component.component.css","./src/app/test-component/test-component.component.html","./src/app/test-component/test-component.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_gendir lazy\n// module id = ./src/$$_gendir lazy recursive\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/app.component.css\n// module id = ./src/app/components/app.component.css\n// module chunks = main","module.exports = \"<app-test-component></app-test-component>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/app.component.html\n// module id = ./src/app/components/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/app.component.ts","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\nimport {AppComponent} from './app.component';\nimport {TestComponentComponent} from '../test-component/test-component.component';\nimport {ApiRequestsService} from '../services/api-requests.service';\nimport {HttpModule} from '@angular/http';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ConfigurationService} from '../services/configuration.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestComponentComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    CommonModule,\n    HttpModule,\n    HttpClientModule,\n  ],\n  providers: [\n    ApiRequestsService,\n    ConfigurationService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/app.module.ts","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs/Observable';\nimport {ConfigurationService} from './configuration.service';\n\n@Injectable()\nexport class ApiRequestsService {\n\n  private testEndpoint = 'test/';\n  private actionUrl: string;\n\n  constructor(private http: HttpClient,\n              private configurationService: ConfigurationService) {\n    this.actionUrl = `${configurationService.apiHost}${configurationService.apiPrefix}`;\n  }\n\n  getTests(): Observable<any> {\n    return this.http.get<any>(this.actionUrl + this.testEndpoint);\n  }\n\n  postTest(jsonBody): Observable<void> {\n    return this.http.post<void>(this.actionUrl + this.testEndpoint, jsonBody);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/api-requests.service.ts","import {Injectable} from '@angular/core';\nimport {environment} from '../../environments/environment';\n\n@Injectable()\nexport class ConfigurationService {\n  public apiHost: string   = environment.apiHost;\n  public apiPrefix: string = environment.apiPrefix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/configuration.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/test-component/test-component.component.css\n// module id = ./src/app/test-component/test-component.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row col s12\\\">\\n  <div class=\\\"container col s6\\\">\\n    <h1>Test mongoDB</h1>\\n    <h5>Here it is possible to test the connection between client, server and database</h5>\\n    <form (submit)=\\\"onSubmit()\\\" novalidate #finalForm=\\\"ngForm\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name</label>\\n        <input type=\\\"text\\\" name = \\\"name\\\" class=\\\"form-control\\\" id=\\\"name\\\" [(ngModel)]=\\\"testValues['name']\\\" required>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"text\\\" name = \\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" [(ngModel)]=\\\"testValues['email']\\\" required>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"type\\\">Type</label>\\n        <input type=\\\"number\\\" name = \\\"type\\\" class=\\\"form-control\\\" id=\\\"type\\\" [(ngModel)]=\\\"testValues['type']\\\" required>\\n      </div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n\\n    </form>\\n  </div>\\n  <hr/>\\n  <div class=\\\"container col s6\\\">\\n    <button (click)=\\\"getTests()\\\" class=\\\"btn btn-success\\\">Get entries</button>\\n  </div>\\n  <br>\\n  <div *ngFor=\\\"let entry of testEntries\\\">\\n      <pre>{{entry | json}}</pre>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/test-component/test-component.component.html\n// module id = ./src/app/test-component/test-component.component.html\n// module chunks = main","import {Component, OnInit} from '@angular/core';\nimport {ApiRequestsService} from '../services/api-requests.service';\n\n@Component({\n  selector: 'app-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css']\n})\nexport class TestComponentComponent implements OnInit {\n\n  public testValues: any = {};\n  public testEntries: any = [];\n\n  constructor(private apiRequestsService: ApiRequestsService) {\n  }\n\n  ngOnInit() {\n\n  }\n\n  public getTests(): void {\n    this.apiRequestsService.getTests().subscribe(response => this.testEntries = response);\n  }\n\n  public onSubmit(): void {\n    this.apiRequestsService.postTest(this.testValues).subscribe(response => alert('Successfully added'));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/test-component/test-component.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  apiHost:    'http://localhost:4200/',\n  apiPrefix:  'api/',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/components/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}